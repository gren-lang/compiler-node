module Test.CLI.Parser exposing (tests)

import Expect exposing (Expectation)
import Test exposing (Test, describe, test)
import CLI.Parser as Parser
import CLI.PrettyPrinter as PP
import FileSystem.Path as Path
import Dict


tests : Test
tests =
    describe "CLI Parser"
        [ test "Parses successfully" <| \{} -> 
            expectParseSuccess testCmd testArgs <| \_ ->
                Expect.pass
        , test "This particular test case even succeeds without args or flags" <| \{} ->
            expectParseSuccess testCmd ["make"] <| \_ ->
                Expect.pass
        , test "Passing --version returns the app version" <| \{} ->
            runCommand testCmd ["--version"]
                |> Expect.equal (Parser.HelpText <| PP.text testApp.version)
        , test "Passing --help prints help text" <| \{} ->
            let
                result =
                    runCommand testCmd ["--help"]
            in
            when result is
                Parser.HelpText prettyText ->
                    let
                        plainText =
                            PP.toString prettyText
                    in
                    Expect.all
                        [ \{} -> expectStringContains (PP.toString testApp.intro) plainText
                        , \{} -> expectStringContains testCmd.word plainText
                        , \{} -> expectStringContains (PP.toString testApp.outro) plainText
                        ]
                        {}

                _ ->
                    Expect.fail "--help didn't print help text"
        , test "Passing --help after a command prints help text for that specific command" <| \{} ->
            let
                result =
                    runCommand testCmd ["make", "--help"]
            in
            when result is
                Parser.HelpText prettyText ->
                    let
                        plainText =
                            PP.toString prettyText
                    in
                    Expect.all
                        [ \{} -> expectStringContains testCmd.word plainText
                        , \{} -> expectStringContains testCmd.summary plainText
                        , \{} -> expectStringContains (PP.toString testCmd.example) plainText
                        , \{} -> expectStringContains "--debug" plainText
                        , \{} -> expectStringContains "--output=<path>" plainText
                        ]
                        {}

                _ ->
                    Expect.fail "--help didn't print help text"
        , test "If you don't pass a command, the help text is printed" <| \{} ->
            Expect.equal
                (runCommand testCmd [])
                (runCommand testCmd ["--help"])
        , test "The command name must match" <| \{} ->
            runCommand testCmd ["macbeth"]
                |> Expect.equal (Parser.UnknownCommand "macbeth")
        , describe "Args"
            [ test "Args in valid example is parsed correctly" <| \{} ->
                expectParseSuccess testCmd testArgs <| \cmd ->
                    Expect.equal
                        [ Path.fromPosixString "src/Main.gren" ]
                        cmd.args
            , test "Fails if passed arg fails the parser" <| \{} ->
                runCommand (cmdBuilder Parser.noArgs testFlags) [ "make", "src/Main" ]
                    |> Expect.equal 
                        (Parser.BadArguments <| Parser.ArgumentParserWrongArity { expected = 0, actual = 1})
            , test "Can map arg parser" <| \{} ->
                let
                    cmd =
                        cmdBuilder (Parser.mapArgs (\_ -> []) Parser.noArgs) testFlags
                in
                expectParseSuccess cmd [ "make" ] <| \exec ->
                    Expect.equal [] exec.args
            , describe "No args" <|
                let
                    testCmdNoArgs =
                        cmdBuilder (Parser.noArgs) testFlags
                in
                [ test "Valid example parses to empty list when no args are passed" <| \{} ->
                    expectParseSuccess testCmd [ "make" ] <| \cmd ->
                        Expect.equal [] cmd.args
                , test "Passing no args when expecting none" <| \{} ->
                    expectParseSuccess testCmdNoArgs [ "make" ] <| \cmd ->
                        Expect.equal {} cmd.args
                , test "Passing args when expecting none" <| \{} ->
                    runCommand testCmdNoArgs testArgs
                        |> Expect.equal
                            (Parser.BadArguments <| Parser.ArgumentParserWrongArity 
                                { expected = 0
                                , actual = 1
                                }
                            )
                ]
            , describe "One arg" <|
                let
                    testCmdOneArg =
                        cmdBuilder (Parser.oneArg Parser.grenFileParser) testFlags
                in
                [ test "Passing one arg when one is expected" <| \{} ->
                    expectParseSuccess testCmdOneArg testArgs <| \cmd ->
                        Expect.equal ( Path.fromPosixString "src/Main.gren" ) cmd.args
                , test "Passing no args when one is expected" <| \{} ->
                    runCommand testCmdOneArg [ "make" ]
                        |> Expect.equal
                            (Parser.BadArguments <| Parser.ArgumentParserWrongArity 
                                { expected = 1
                                , actual = 0
                                }
                            )
                , test "Passing multiple args when one is expected" <| \{} ->
                    runCommand testCmdOneArg [ "make", "src/Main.gren", "Example.gren" ]
                        |> Expect.equal 
                            (Parser.BadArguments <| Parser.ArgumentParserWrongArity 
                                { expected = 1
                                , actual = 2
                                }
                            )
                ]
            , describe "Two args" <|
                let
                    testCmdTwoArgs =
                        cmdBuilder 
                            (Parser.twoArgs
                                (\path file -> { path = path, file = file })
                                Parser.pathParser
                                Parser.grenFileParser
                            )
                            testFlags

                    testTwoArgs =
                        [ "make", "src/Dest", "src/MyMain.gren" ]

                    validResult =
                        { path = Path.fromPosixString "src/Dest"
                        , file = Path.fromPosixString "src/MyMain.gren"
                        }
                in
                [ test "Valid example" <| \{} ->
                    expectParseSuccess testCmdTwoArgs testTwoArgs <| \cmd ->
                        Expect.equal validResult cmd.args
                , test "Passing invalid arg" <| \{} ->
                    runCommand testCmdTwoArgs [ "make", "src/Dist", "src/Dest" ]
                        |> Expect.equal
                            (Parser.BadArguments <| Parser.ArgumentParserInvalidArgument
                                { argument = "src/Dest"
                                , title = Parser.grenFileParser.singular
                                , examples = Parser.grenFileParser.examples
                                }
                            )
                , test "Passing no args when two is expected" <| \{} ->
                    runCommand testCmdTwoArgs [ "make" ]
                        |> Expect.equal
                            (Parser.BadArguments <| Parser.ArgumentParserWrongArity 
                                { expected = 2
                                , actual = 0
                                }
                            )
                , test "Passing one args when two is expected" <| \{} ->
                    runCommand testCmdTwoArgs [ "make", "src/Dest" ]
                        |> Expect.equal
                            (Parser.BadArguments <| Parser.ArgumentParserWrongArity 
                                { expected = 2
                                , actual = 1
                                }
                            )
                , test "Passing three args when two is expected" <| \{} ->
                    runCommand testCmdTwoArgs [ "make", "src/Main.gren", "Example.gren", "Bah" ]
                        |> Expect.equal 
                            (Parser.BadArguments <| Parser.ArgumentParserWrongArity 
                                { expected = 2
                                , actual = 3
                                }
                            )
                ]
            , describe "Three args" <|
                let
                    testCmdThreeArgs =
                        cmdBuilder
                            (Parser.threeArgs
                                (\path file path2 -> 
                                    { path = path, file = file, path2 = path2 }
                                )
                                Parser.pathParser
                                Parser.grenFileParser
                                Parser.pathParser
                            )
                            testFlags

                    testThreeArgs =
                        [ "make", "src/Dest", "src/MyMain.gren", "test/Test" ]

                    validResult =
                        { path = Path.fromPosixString "src/Dest"
                        , file = Path.fromPosixString "src/MyMain.gren"
                        , path2 = Path.fromPosixString "test/Test"
                        }
                in
                [ test "Valid example" <| \{} ->
                    expectParseSuccess testCmdThreeArgs testThreeArgs <| \cmd ->
                        Expect.equal validResult cmd.args
                , test "Passing invalid arg" <| \{} ->
                    runCommand testCmdThreeArgs [ "make", "src/Dist", "src/Dest", "test/Test" ]
                        |> Expect.equal
                            (Parser.BadArguments <| Parser.ArgumentParserInvalidArgument
                                { argument = "src/Dest"
                                , title = Parser.grenFileParser.singular
                                , examples = Parser.grenFileParser.examples
                                }
                            )
                , test "Passing no args when three is expected" <| \{} ->
                    runCommand testCmdThreeArgs [ "make" ]
                        |> Expect.equal
                            (Parser.BadArguments <| Parser.ArgumentParserWrongArity 
                                { expected = 3
                                , actual = 0
                                }
                            )
                , test "Passing one arg when three is expected" <| \{} ->
                    runCommand testCmdThreeArgs [ "make", "src/Dest" ]
                        |> Expect.equal
                            (Parser.BadArguments <| Parser.ArgumentParserWrongArity 
                                { expected = 3
                                , actual = 1
                                }
                            )
                , test "Passing two args when three is expected" <| \{} ->
                    runCommand testCmdThreeArgs [ "make", "src/Main.gren", "Example.gren" ]
                        |> Expect.equal 
                            (Parser.BadArguments <| Parser.ArgumentParserWrongArity 
                                { expected = 3
                                , actual = 2
                                }
                            )
                , test "Passing four args when three is expected" <| \{} ->
                    runCommand testCmdThreeArgs (Array.pushLast "out.txt" testThreeArgs)
                        |> Expect.equal 
                            (Parser.BadArguments <| Parser.ArgumentParserWrongArity 
                                { expected = 3
                                , actual = 4
                                }
                            )
                ]
            , describe "Zero or more args"
                [ test "Zero args" <| \{} ->
                    expectParseSuccess testCmd [ "make" ] <| \cmd ->
                        Expect.equal [] cmd.args
                , test "Multiple args" <| \{} ->
                    expectParseSuccess testCmd [ "make", "src/Main.gren", "src/Logic.gren" ] <| \cmd ->
                        Expect.equal
                            [ Path.fromPosixString "src/Main.gren"
                            , Path.fromPosixString "src/Logic.gren"
                            ]
                            cmd.args                
                ]
            , describe "oneOfArgs" <|
                let
                    testCmdOneOfArgs =
                        cmdBuilder
                            (Parser.oneOfArgs
                                [ Parser.noArgs
                                    |> Parser.mapArgs (\{} ->
                                            { path = Path.fromPosixString ""
                                            , file = Path.fromPosixString ""
                                            }
                                        )
                                , Parser.twoArgs
                                    (\path file -> 
                                        { path = path, file = file }
                                    )
                                    Parser.pathParser
                                    Parser.grenFileParser
                                ]
                            )
                            testFlags

                    firstTest =
                        [ "make" ]

                    secondTest =
                        [ "make", "out.txt", "src/Main.gren" ]

                    validFirstResult =
                        { path = Path.fromPosixString ""
                        , file = Path.fromPosixString ""
                        }
                    
                    validSecondResult =
                        { path = Path.fromPosixString "out.txt"
                        , file = Path.fromPosixString "src/Main.gren"
                        }
                in
                [ test "Zero args is fine" <| \{} ->
                    expectParseSuccess testCmdOneOfArgs firstTest <| \cmd ->
                        Expect.equal validFirstResult cmd.args
                , test "Two args is fine" <| \{} ->
                    expectParseSuccess testCmdOneOfArgs secondTest <| \cmd ->
                        Expect.equal validSecondResult cmd.args
                , test "Everything else still fails, returning first parse error" <| \{} ->
                    runCommand testCmdOneOfArgs [ "make", "src/Dest" ]
                        |> Expect.equal
                            (Parser.BadArguments <| Parser.ArgumentParserWrongArity 
                                { expected = 0
                                , actual = 1
                                }
                            )
                , test "Tries to find error of matching arity" <| \{} ->
                    when runCommand testCmdOneOfArgs [ "make", "out.txt", "src/Dest" ] is
                        Parser.BadArguments (Parser.ArgumentParserInvalidArgument _) ->
                            Expect.pass

                        _ ->
                            Expect.fail "Expected parsing to fail with an invalid argument error"
                ]
            ]
        , describe "Flags"
            [ test "Flags in valid example are parsed correctly" <| \{} -> 
                expectParseSuccess testCmd testArgs <| \cmd ->
                    Expect.equal 
                        { debug = True
                        , output = Just <| Path.fromPosixString "out"
                        }
                        cmd.flags
            , test "Leaving out a flag means it's Nothing" <| \{} ->
                expectParseSuccess testCmd [ "make" ] <| \cmd ->
                    Expect.equal Nothing cmd.flags.output
            , test "Leaving out a toggle flag means it's false" <| \{} -> 
                expectParseSuccess testCmd (Array.keepIf (\f -> f /= "--debug") testArgs) <| \cmd ->
                    Expect.equal False cmd.flags.debug
            , test "Passing a toggle flag that is defined as value flag fails" <| \{} ->
                runCommand testCmd [ "make", "--output" ]
                    |> expectBadFlag (Parser.FlagParserMissingValue { knownFlags = Dict.empty, flagName = "output" })
            , test "Passing a value flag without a set value fails" <| \{} ->
                runCommand testCmd [ "make", "--output=" ]
                    |> expectBadFlag (Parser.FlagParserMissingValue { knownFlags = Dict.empty, flagName = "output" })
            , test "Passing a value flag where a toggle was expected fails" <| \{} ->
                runCommand testCmd [ "make", "--debug=true" ]
                    |> expectBadFlag (Parser.FlagParserFoundValueOnToggle { knownFlags = Dict.empty, flagName = "debug" })
            , test "Passing a flag that isn't recognized will return the appropriate error" <| \{} ->
                runCommand testCmd [ "make", "--hiya" ]
                    |> expectBadFlag (Parser.FlagParserUnknownFlag { knownFlags = Dict.empty, flagName = "hiya" })
            , test "Passing --help will always output help text" <| \{} ->
                when runCommand testCmd [ "make", "--help" ] is
                    Parser.HelpText _ ->
                        Expect.pass

                    _ ->
                        Expect.fail "Expected help text"
            , test "Passing --help will output help text, even in the presence of other flags" <| \{} ->
                when runCommand testCmd [ "make", "--debug", "--help" ] is
                    Parser.HelpText _ ->
                        Expect.pass

                    _ ->
                        Expect.fail "Expected help text"
            , test "Passing --help will output help text even when command takes no flags and requires args" <| \{} ->
                when runCommand (cmdBuilder (Parser.oneArg Parser.pathParser) Parser.noFlags) [ "make", "--help" ] is
                    Parser.HelpText _ ->
                        Expect.pass

                    _ ->
                        Expect.fail "Expected help text"
            ]
        ] 


expectStringContains : String -> String -> Expectation
expectStringContains subStr str =
    if String.contains subStr str then
        Expect.pass

    else
        Expect.fail <| "Expected to find '" ++ subStr ++ "' in text."


testApp =
    { name = "my-program"
    , version = "1.1.0"
    , intro = PP.text "intro"
    , outro = PP.text "outro"
    , commands = Parser.defineGroup
    }


runCommand : Parser.Command args flags result -> Array String -> Parser.CommandParseResult result
runCommand cmd args =
    let
        parser =
            { testApp
                | commands =
                    Parser.defineGroup
                        |> Parser.withCommand cmd
            }
    in
    Parser.run args parser


expectParseSuccess : Parser.Command args flags result -> Array String -> (result -> Expectation) -> Expectation
expectParseSuccess cmd args next =
    when runCommand cmd args is
        Parser.Success result ->
            next result
        
        _ ->
            Expect.fail "Failed to parse"


expectBadFlag : Parser.FlagParserError -> Parser.CommandParseResult a-> Expectation
expectBadFlag expected actualError =
    when actualError is
        Parser.BadFlags err ->
            err
                |> stripFlagDescriptions
                |> Expect.equal expected
        
        _ ->
            Expect.fail "Expected parsing to fail with BadFlag error"


stripFlagDescriptions : Parser.FlagParserError -> Parser.FlagParserError
stripFlagDescriptions error =
    when error is
        Parser.FlagParserFoundValueOnToggle { flagName } ->
            Parser.FlagParserFoundValueOnToggle { knownFlags = Dict.empty, flagName = flagName }
        
        Parser.FlagParserMissingValue { flagName } ->
            Parser.FlagParserMissingValue { knownFlags = Dict.empty, flagName = flagName }
        
        Parser.FlagParserInvalidValue { flagName } ->
            Parser.FlagParserInvalidValue { knownFlags = Dict.empty, flagName = flagName }
        
        Parser.FlagParserUnknownFlag { flagName } ->
            Parser.FlagParserUnknownFlag { knownFlags = Dict.empty, flagName = flagName }


testArgs : Array String
testArgs =
    [ "make", "--debug", "--output=out", "src/Main.gren" ]


testCmd =
    cmdBuilder testArgParser testFlags


testArgParser =
    (Parser.zeroOrMoreArgs Parser.grenFileParser)


testFlags =
    Parser.initFlags 
                (\debug output ->
                    { debug = debug
                    , output = output
                    }
                )
                |> Parser.toggle "debug" "debug desc"
                |> Parser.flag "output" Parser.pathParser "output path"


cmdBuilder argParser flagParser =
    { word = "make"
    , arguments = argParser
    , flags = flagParser
    , commonDescription =
        Just "make your project"
    , summary =
        "Makey make make"
    , example =
        PP.text "gren make src/Main.gren"
    , builder =
        \args flags ->
            { args = args
            , flags = flags
            }
    }

