module Compiler.Platform exposing
    ( Platform (..)
    , isCompatible
    --
    , toString
    , toJson
    , jsonDecoder
    )


{-| Functions for working with a project's target platform.

@docs Platform, isCompatible

## Value conversion

@docs toString, toJson, jsonDecoder
-}

import Json.Encode as Encode
import Json.Decode as Decode exposing (Decoder)


{-| The platform targetted by a project. You'll read this value
from a gren.json file.
-}
type Platform
    = Node
    | Browser
    | Common


{-| Check if two [Platform](#Platform) values are compatible.

`Common` is compatible with all other platforms.
-}
isCompatible : Platform -> Platform -> Bool
isCompatible a b =
    a == b || b == Common


{-| Return the `String` representation for a [Platform](#Platform).
-}
toString : Platform -> String
toString platform =
    when platform is
        Common -> "common"
        Browser -> "browser"
        Node -> "node"


{-| Convert a [Platform](#Platform) value to it's JSON representation.
-}
toJson : Platform -> Encode.Value
toJson platform =
    Encode.string (toString platform)


{-| JSON decoder for [Platform](#Platform).
-}
jsonDecoder : Decoder Platform
jsonDecoder =
    Decode.string
        |> Decode.andThen (\value ->
            when String.toLower value is
                "common" -> Decode.succeed Common
                "browser" -> Decode.succeed Browser
                "node" -> Decode.succeed Node
                _ -> Decode.fail (value ++ " is not a valid platform value")
        )
