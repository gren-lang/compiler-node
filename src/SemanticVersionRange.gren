module SemanticVersionRange exposing
    ( SemanticVersionRange
    , of
    , example
    , lowerBound
    , upperBound
    , intersect
    , compatibleWith
    , fromExact
    , fromString
    , jsonDecoder
    , toString
    , toJson
    )


{-| A module for working with ranges of semantic versions, like `1.0.0 <= v < 2.0.0`.

@docs SemanticVersionRange, example

## Construction

@docs of, fromExact, compatibleWith, fromString, jsonDecoder

## Query

@docs lowerBound, upperBound, intersect

## Conversion

@docs toString, toJson
-}


import SemanticVersion exposing (SemanticVersion)
import Json.Decode as Decode exposing (Decoder)
import Json.Encode as Encode


{-| A range of `SemanticVersion` values between a lower value (inclusive) and an upper
value (exclusive).
-}
type SemanticVersionRange
    = SemanticVersionRange { lower : SemanticVersion, upper : SemanticVersion }


{-| Construct a [SemanticVersionRange](#SemanticVersionRange) between the two provided
`SemanticVersion`s. This function will return `Nothing` if the first value is less than
or equal to the second.
-}
of : SemanticVersion -> SemanticVersion -> Maybe SemanticVersionRange
of lower upper =
    if SemanticVersion.compare lower upper /= GT then
        Just (SemanticVersionRange { lower = lower, upper = upper })

    else
        Nothing

{-| An example range. More specifically, the range `1.0.0 <= v < 2.0.0`.
-}
example : SemanticVersionRange
example =
    SemanticVersionRange
        { lower = { major = 1, minor = 0, patch = 0 }
        , upper = { major = 2, minor = 0, patch = 0 }
        }


{-| Returns the lowest `SemanticVersion` of a [SemanticVersionRange](#SemanticVersionRange).
-}
lowerBound : SemanticVersionRange -> SemanticVersion
lowerBound (SemanticVersionRange { lower }) =
    lower


{-| Returns the lowest `SemanticVersion` which is higher than all other versions of the
[SemanticVersionRange](#SemanticVersionRange).
-}
upperBound : SemanticVersionRange -> SemanticVersion
upperBound (SemanticVersionRange { upper }) =
    upper


{-| Construct a [SemanticVersionRange](#SemanticVersionRange) that forms the intersection
of the two provided values.
-}
intersect : SemanticVersionRange -> SemanticVersionRange -> Maybe SemanticVersionRange
intersect left right =
    let
        (SemanticVersionRange { lower = lowerLeft, upper = upperLeft }) =
            left

        (SemanticVersionRange { lower = lowerRight, upper = upperRight }) =
            right
    in
    when SemanticVersion.compare upperLeft upperRight is
        LT ->
            if SemanticVersion.compare upperLeft lowerRight /= GT then
                Nothing

            else
                Just <|
                    when SemanticVersion.compare lowerLeft lowerRight is
                        LT ->
                            SemanticVersionRange { lower = lowerRight, upper = upperLeft }

                        EQ ->
                            SemanticVersionRange { lower = lowerLeft, upper = upperLeft }

                        GT ->
                            SemanticVersionRange { lower = lowerLeft, upper = upperLeft }

        EQ ->
            Just <|
                when SemanticVersion.compare lowerLeft lowerRight is
                    LT ->
                        SemanticVersionRange { lower = lowerRight, upper = upperLeft }

                    EQ ->
                        SemanticVersionRange { lower = lowerLeft, upper = upperLeft }

                    GT ->
                        SemanticVersionRange { lower = lowerLeft, upper = upperLeft }

        GT ->
            if SemanticVersion.compare upperRight lowerLeft /= GT then
                Nothing
            else
                Just <|
                    when SemanticVersion.compare lowerLeft lowerRight is
                        LT ->
                            SemanticVersionRange { lower = lowerLeft, upper = upperRight }

                        EQ ->
                            SemanticVersionRange { lower = lowerLeft, upper = upperRight }

                        GT ->
                            SemanticVersionRange { lower = lowerRight, upper = upperRight }


{-| Construct a [SemanticVersionRange](#SemanticVersionRange) that is compatible with the
provided `SemanticVersion`, and other semantically compatible versions.

Using this function with the version `1.2.3` will return the range `1.2.0 <= v < 2.0.0`.
-}
compatibleWith : SemanticVersion -> SemanticVersionRange
compatibleWith ver =
    if ver.major < 1 then
        SemanticVersionRange
            { lower = { major = ver.major, minor = ver.minor, patch = 0 }
            , upper = { major = ver.major, minor = ver.minor + 1, patch = 0 }
            }

    else
        SemanticVersionRange
            { lower = { major = ver.major, minor = ver.minor, patch = 0 }
            , upper = { major = ver.major + 1, minor = 0, patch = 0 }
            }


{-| Construct a [SemanticVersionRange](#SemanticVersionRange) where the provided
`SemanticVersion` is the only contained value.

Using the function with the version `1.5.0` will return the range `1.5.0 <= v < 1.5.1`.
-}
fromExact : SemanticVersion -> SemanticVersionRange
fromExact ({ major, minor, patch } as lower) =
    SemanticVersionRange
        { lower = lower
        , upper = { major = major, minor = minor, patch = patch + 1 }
        }


{-| Convert a `String` formatted like `1.0.0 <= v < 2.0.0` to a [SemanticVerisonRange](#SemanticVersionRange).
-}
fromString : String -> Maybe SemanticVersionRange
fromString str =
    when str |> String.keepIf (\char -> char /= ' ') |> String.split "<=v<" is
        [ lowerStr, upperStr ] ->
            when
                { maybeLower = SemanticVersion.fromString lowerStr
                , maybeUpper = SemanticVersion.fromString upperStr
                }
            is
            { maybeLower = Just lower, maybeUpper = Just upper } ->
                Just (SemanticVersionRange { lower = lower, upper = upper })

            _ ->
                Nothing

        _ ->
            Nothing


{-| JSON Decoder for a [SemanticVersionRange](#SemanticVersionRange).
-}
jsonDecoder : Decoder SemanticVersionRange
jsonDecoder =
    Decode.string
        |> Decode.andThen
            (\strValue ->
                when fromString strValue is
                    Just range ->
                        Decode.succeed range

                    Nothing ->
                        Decode.fail ("Not a valid range: " ++ strValue)
            )    


{-| Create a `String` representation of a [SemanticVersionRange](#SemanticVersionRange).
-}
toString : SemanticVersionRange -> String
toString (SemanticVersionRange { lower, upper }) =
    SemanticVersion.toString lower ++ " <= v < " ++ SemanticVersion.toString upper


{-| Encode a [SemanticVersionRange](#SemanticVersionRange) as JSON.
-}
toJson : SemanticVersionRange -> Encode.Value
toJson range =
    Encode.string (toString range)
