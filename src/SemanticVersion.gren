module SemanticVersion exposing 
    ( SemanticVersion
    , compare
    , fromString
    , cliParser
    , jsonDecoder
    , toString
    , toJson
    )


{-| Semantic versions consist of three numbers, each having a specific
meaning. This module makes no attempt to enforce the semantic versioning
rules.

@docs SemanticVersion

## Constructors

@docs fromString, cliParser, jsonDecoder

## Queries

@docs compare

## Conversions

@docs toString, toJson
-}


import CLI.Parser
import Json.Encode as Json
import Json.Decode as Decode exposing (Decoder)


{-| A semantic version has three numbers, separated by a period.

* `major` signifies API compatibility. Two version with different `major` numbers, are likely
incompatible.
* `minor` represents additions. `1.0.0` should be compatible with `1.1.0`, but not the other way around.
* `patch` represents bug fixes. `1.0.0` and `1.0.1` has the same API, but the latter might be more stable.
-}
type alias SemanticVersion = 
    { major : Int
    , minor : Int
    , patch : Int
    }


{-| Compare two [SemanticVersion](#SemanticVersion).
-}
compare : SemanticVersion -> SemanticVersion -> Order
compare left right =
    when Basics.compare left.major right.major is
        EQ ->
            when Basics.compare left.minor right.minor is
                EQ ->
                    Basics.compare left.patch right.patch

                otherMinor ->
                    otherMinor

        otherMajor ->
            otherMajor


{-| Convert a `String` into a [SemanticVersion](#SemanticVersion).
-}
fromString : String -> Maybe SemanticVersion
fromString str =
    let
        parts =
            str
            |> String.split "."
            |> Array.mapAndKeepJust String.toInt
            |> Array.keepIf (\num -> num >= 0)
    in
    when parts is
        [ major, minor, patch ] ->
            Just
                { major = major
                , minor = minor
                , patch = patch
                }

        _ ->
            Nothing


{-| A parser for use with [CLI.Parser](#CLI.Parser).
-}
cliParser : CLI.Parser.ValueParser SemanticVersion
cliParser =
    { singular = "version"
    , plural = "versions"
    , fn = fromString
    , examples =
        [ "1.0.0"
        , "1.2.3"
        , "5.1.0"
        ]
    }


{-| Decode [SemanticVersion](#SemanticVersion) from JSON.
-}
jsonDecoder : Decoder SemanticVersion
jsonDecoder =
    Decode.string
        |> Decode.andThen
            (\strValue ->
                when fromString strValue is
                    Just semVer ->
                        Decode.succeed semVer

                    Nothing ->
                        Decode.fail ("This is not a valid semver formatted version: " ++ strValue)
            )


{-| Turn a [SemanticVersion](#SemanticVersion) into a `String`.
-}
toString : SemanticVersion -> String
toString { major, minor, patch } =
    String.fromInt major ++ "." ++ String.fromInt minor ++ "." ++ String.fromInt patch


{-| Turn a [SemanticVersion](#SemanticVersion) into `Json`.
-}
toJson : SemanticVersion -> Json.Value
toJson semver =
    Json.string <| toString semver

